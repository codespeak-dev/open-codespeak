Your job is to extract a list of Django models and their fields given the specification in <spec> tag. Sometimes you might be given a diff of the specification in <spec_diff> tag and existing entities in <existing_entities> tag.

IMPORTANT: you should only extract entities that are actually storing the data in the database. It's perfectly fine for a specification not to have any entities.

IMPORTANT: If there's an intermediate model that connects two other models (like Appointment with Patient and Doctor, or like LineItem with Order and Product),
do NOT create direct ManyToManyField relationships between the connected models. 
The intermediate model's ForeignKey relationships are sufficient to represent the many-to-many connection.

{%- if existing_entities %}
<existing_entities>
The following entities already exist in the system:
{%- for entity in existing_entities %}
- {{ entity.name }}
  {%- for field in entity.fields %}
  - {{ field.name }}: {{ field.type }}
  {%- endfor %}
  {%- for rel in entity.relationships %}
  - {{ rel.name }}: {{ rel.type }} -> {{ rel.related_to }}
{%- endfor %}{% endfor %}
</existing_entities>

When extracting entities, consider these existing entities and their relationships. You may reference them in new relationships, but avoid duplicating them unless the specification explicitly requires modifications.
{%- endif %}

<spec>
{{ spec }}
</spec>

{% if spec_diff %}
<spec_diff>
The following changes have been made to the specification:
{{ spec_diff }}
</spec_diff>

Focus on extracting entities that are relevant to these changes.
{% endif %}